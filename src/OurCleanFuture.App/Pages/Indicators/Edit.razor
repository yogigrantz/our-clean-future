@page "/indicators/edit/{id:int}"
@using OurCleanFuture.App.Extensions
@using OurCleanFuture.Data.Entities
@using Action = OurCleanFuture.Data.Entities.Action
@attribute [Authorize]

@if (Indicator is not null)
{
    <PageTitle>[Indicator] @Indicator.Title.Truncate(16)</PageTitle>
}

@if (_isLoaded == false)
{
    <MudText Typo="Typo.h6">Loading...</MudText>
}
else if (Indicator is null)
{
    <MudAlert Severity="Severity.Error">There is no indicator with an id of @Id</MudAlert>
}
else
{
    <MudText Typo="Typo.h3" Class="mb-8">
        <b>Editing indicator:</b> @Indicator.Title
    </MudText>
        @*<MudAlert Icon="@Icons.Material.Filled.Lightbulb" Severity="Severity.Normal" Class="mb-6">
            If you need to modify a value within a dropdown menu, you can do that from the <b>Administration</b> menu on the lefthand navigation bar.
            </MudAlert>*@
    <EditForm Model="@Indicator" OnValidSubmit="Update">
        <ObjectGraphDataAnnotationsValidator/>
        <MudGrid>
            <AuthorizeView Roles="Administrator, 1" Context="_">
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudSelect T="Lead" Label="Lead(s)" MultiSelection="true" @bind-SelectedValues="SelectedLeads">
                            @foreach (var lead in Leads)
                            {
                                <MudSelectItem Value="lead">@lead.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Title" T="string" @bind-Value="Indicator.Title" For="@(() => Indicator.Title)"/>
                        <MudTextField Label="Description" T="string" @bind-Value="Indicator.Description" Lines="2" For="@(() => Indicator.Description)"/>

                        <MudItem>
                            <MudSelect Label="Parent Type" @bind-Value="SelectedParentType">
                                <MudSelectItem Value='"Goal"'>Goal</MudSelectItem>
                                <MudSelectItem Value='"Objective"'>Objective</MudSelectItem>
                                <MudSelectItem Value='"Action"'>Action</MudSelectItem>
                            </MudSelect>
                        </MudItem>

                        @if (SelectedParentType == "Goal")
                        {
                            <MudItem Class="mb-4">
                                <MudSelect Label="Goal" T="Goal" @bind-Value="Indicator.Goal" DisableUnderLine="true">
                                    @foreach (var goal in Goals)
                                    {
                                        <MudSelectItem Value="goal">@goal.Title</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                        else if (SelectedParentType == "Objective")
                        {
                            <MudItem Class="mb-6">
                                <MudSelect Label="Objective" T="Objective" @bind-Value="Indicator.Objective" DisableUnderLine="true">
                                    @foreach (var objective in Objectives)
                                    {
                                        <MudSelectItem Value="objective">@objective.Area.Title | @objective.Title</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                        else if (SelectedParentType == "Action")
                        {
                            <MudItem Class="mb-12">
                                <MudSelect Label="Action" T="Action" @bind-Value="Indicator.Action" DisableUnderLine="true">
                                    @foreach (var action in Actions.OrderBy(a => a.Number[0]).ThenBy(a => a.Number.Length).ThenBy(a => a.Number))
                                    {
                                        <MudSelectItem Value="action">@action.ToString()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudSelect T="DataType" Label="Data Type" @bind-Value="Indicator.DataType">
                            @foreach (DataType dataType in Enum.GetValues(typeof(DataType)))
                            {
                                <MudSelectItem Value="dataType">@dataType</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Label="Collection Interval" T="CollectionInterval" @bind-Value="Indicator.CollectionInterval">
                            @foreach (CollectionInterval interval in Enum.GetValues(typeof(CollectionInterval)))
                            {
                                <MudSelectItem Value="interval">@interval</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="UnitOfMeasurement" Label="Unit of Measurement" @bind-Value="Indicator.UnitOfMeasurement">
                            @foreach (var unit in UnitsOfMeasurement.OrderBy(u => u.Symbol))
                            {
                                <MudSelectItem Value="unit">@unit.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Internal Notes" @bind-Value="Indicator.Note" Lines="2" For=@(() => Indicator.Note)/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.h6">Target</MudText>
                        @if (Indicator.Target != null)
                        {
                            <MudNumericField Label="Value" @bind-Value="Indicator.Target.Value" Adornment="Adornment.End" AdornmentText="@Indicator.UnitOfMeasurement.Symbol" HideSpinButtons="true"></MudNumericField>
                            <MudDatePicker Label="Completion Date" @bind-Date="Indicator.Target.CompletionDate" Editable="true" For="@(() => Indicator.Target.CompletionDate)"/>
                            <MudTextField Label="Description" @bind-Value="Indicator.Target.Description" Lines="2" For="@(() => Indicator.Target.Description)"/>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteTarget" Class="mt-4">Delete target</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="CreateTarget" Class="mt-4">Add target</MudButton>
                        }
                    </MudPaper>
                </MudItem>
            </AuthorizeView>

            <AuthorizeView Roles="@AuthorizedRoles" Context="_">
                <Authorized>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-4" Elevation="2">
                            <MudTable Items="Indicator.Entries.OrderBy(e => e.StartDate)" Elevation="0" Class="mt-n2" Dense="true">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Entries</MudText>
                                    <MudSpacer/>
                                    <MudButton Color="Color.Tertiary" Variant="Variant.Outlined" OnClick="CreateEntry">New Entry</MudButton>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Period</MudTh>
                                    <MudTh>Value</MudTh>
                                    <MudTh>Note</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="entry">
                                    <MudTd DataLabel="Period">@entry.StartDate.ToString("MMMM d") - @entry.EndDate.ToString("MMMM d, yyyy")</MudTd>
                                    <MudTd DataLabel="Value">@entry.ValueToString()</MudTd>
                                    <MudTd DataLabel="Note">@entry.Note</MudTd>
                                    <MudTd>
                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                            <MudMenuItem OnClick="() => EditEntry(entry)">Edit</MudMenuItem>
                                            <AuthorizeView Roles="Administrator, 1" Context="delete">
                                                <MudMenuItem OnClick="() => DeleteEntry(entry)">Delete</MudMenuItem>
                                            </AuthorizeView>
                                        </MudMenu>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" Class="d-flex justify-space-between py-2 px-3 mt-2">
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Link="/indicators">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Disabled="true"/>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                    </MudItem>
                </Authorized>
                <NotAuthorized>
                    <MudAlert Severity="Severity.Warning">You are not authorized to view this page.</MudAlert>
                </NotAuthorized>
            </AuthorizeView>
        </MudGrid>
    </EditForm>
}
