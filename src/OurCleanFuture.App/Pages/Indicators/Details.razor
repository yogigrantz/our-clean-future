@page "/indicators/details/{id:int}"
@using OurCleanFuture.App.Extensions

@if (isLoaded == false)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
        <MudText Typo="Typo.h3" Class="mb-8"><b>Indicator:</b> @Indicator.Title</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudField Label="Lead(s)">@Indicator.LeadsToString()</MudField>
                    <MudField Label="Description">@Indicator.Description</MudField>
                    <MudField Label="Data Type">@Indicator.DataType</MudField>
                    <MudField Label="Collection Interval">@Indicator.CollectionInterval</MudField>
                    <MudField Label="Unit of Measurement">@Indicator.UnitOfMeasurement.Name</MudField>
                    <MudField Label="Last Updated By">@(Indicator.UpdatedBy) on @(IndicatorLastUpdated.ToLocalTime().ToString("f"))</MudField>
                </MudPaper>
            </MudItem>
            @if (Indicator.Target != null)
            {
                <MudItem xs="12" sm="6" md="6">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.h6">Target</MudText>
                        @if (Indicator.Target.Value is not null)
                        {
                            <MudField Label="Value" Adornment="Adornment.End" AdornmentText="@Indicator.UnitOfMeasurement.Symbol">@Indicator.Target.Value</MudField>
                        }
                        @if (Indicator.Target.StartDate is not null)
                        {
                            <MudField Label="Start Date">@Indicator.Target.StartDate?.ToLongDateString()</MudField>
                        }
                        <MudField Label="Completion Date">@Indicator.Target.EndDate?.ToString("yyyy")</MudField>
                        @if (!string.IsNullOrWhiteSpace(Indicator.Target.OcfDescription))
                        {
                            <MudField Label="OCF Description">@Indicator.Target.OcfDescription</MudField>
                        }
                    </MudPaper>
                </MudItem>
            }

            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudItem>
                        @if (Indicator.Action is not null)
                        {
                            <MudText Typo="Typo.h6">Goals</MudText>
                            <MudAlert Severity="Severity.Success" NoIcon="true">
                                @if (Indicator.Action.Objective is not null && Indicator.Action.Objective.Goals.Count > 0)
                                {
                                    @foreach (var goal in Indicator.Action.Objective.Goals)
                                    {
                                        <div class="d-flex">
                                            <MudAvatar Image="@goal.GetIconPath()" Class="mr-2 my-2" />
                                            <MudText Class="my-4" Typo="Typo.body2">@goal.Title</MudText>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">Error: This objective is not associated with any goals!</MudText>
                                }
                            </MudAlert>
                            <MudText Typo="Typo.h6">Area</MudText>
                            <MudAlert Severity="Severity.Normal" NoIcon="true">
                                <MudList Clickable="true" DisableGutters="true" Dense="true" Class="mx-n2">
                                    @if (Indicator.Action.Objective is not null && Indicator.Action.Objective.Area is not null)
                                    {
                                        <MudListItem Class="my-n4 px-2" OnClick="(() => ViewArea(Indicator.Action.Objective.Area))">
                                            <div class="d-flex">
                                                <MudAvatar Image="@Indicator.Action.Objective.Area.GetIconPath()" Class="mr-2 my-2" />
                                                <MudText Class="my-4">@Indicator.Action.Objective?.Area?.Title</MudText>
                                            </div>
                                        </MudListItem>
                                    }
                                    else
                                    {
                                        <MudText Class="my-4" Typo="Typo.body2">Error: This objective is not associated with an area!</MudText>
                                    }
                                </MudList>
                            </MudAlert>
                            <MudText Typo="Typo.h6">Objective</MudText>
                            <MudAlert Severity="Severity.Warning" NoIcon="true">
                                @if (Indicator.Action.Objective is not null && Indicator.Action.Objective.Area is not null)
                                {
                                    <MudList Clickable="true" DisableGutters="true" Dense="true">
                                        <MudListItem Class="my-n2 px-2 mx-n2" OnClick="(() => ViewArea(Indicator.Action.Objective.Area))">@Indicator.Action.Objective.Title</MudListItem>
                                    </MudList>
                                }
                                else
                                {
                                    <MudText>Error: This action is not associated with an objective!</MudText>
                                }
                            </MudAlert>
                            <MudText Typo="Typo.h6">Action</MudText>
                            <MudAlert Severity="Severity.Info" NoIcon="true">
                                <MudList Clickable="true" DisableGutters="true" Dense="true">
                                    <MudListItem Class="my-n2 px-2 mx-n2" OnClick="(() => ViewAction(Indicator.Action))">@Indicator.Action.ToString()</MudListItem>
                                </MudList>
                            </MudAlert>
                        }
                        else if (Indicator.Objective is not null)
                        {
                            <MudText Typo="Typo.h6">Goals</MudText>
                            <MudAlert Severity="Severity.Success" NoIcon="true">
                                @if (Indicator.Objective is not null && Indicator.Objective.Goals.Count > 0)
                                {
                                    @foreach (var goal in Indicator.Objective.Goals)
                                    {
                                        <div class="d-flex">
                                            <MudAvatar Image="@goal.GetIconPath()" Class="mr-2 my-2" />
                                            <MudText Class="my-4" Typo="Typo.body2">@goal.Title</MudText>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">Error: This objective is not associated with any goals!</MudText>
                                }
                            </MudAlert>
                            <MudText Typo="Typo.h6">Area</MudText>
                            <MudAlert Severity="Severity.Normal" NoIcon="true">
                                <MudList Clickable="true" DisableGutters="true" Dense="true" Class="mx-n2">
                                    @if (Indicator.Objective.Area is not null)
                                    {
                                        <MudListItem Class="my-n4 px-2" OnClick="(() => ViewArea(Indicator.Objective.Area))">
                                            <div class="d-flex">
                                                <MudAvatar Image="@Indicator.Objective.Area.GetIconPath()" Class="mr-2 my-2" />
                                                <MudText Class="my-4">@Indicator.Objective?.Area?.Title</MudText>
                                            </div>
                                        </MudListItem>
                                    }
                                    else
                                    {
                                        <MudText Class="my-4" Typo="Typo.body2">Error: This objective is not associated with an area!</MudText>
                                    }
                                </MudList>
                            </MudAlert>
                            <MudText Typo="Typo.h6">Objective</MudText>
                            <MudAlert Severity="Severity.Warning" NoIcon="true">
                                <MudList Clickable="true" DisableGutters="true" Dense="true">
                                    <MudListItem Class="my-n2 px-2 mx-n2" OnClick="(() => ViewArea(Indicator.Objective.Area))">@(Indicator.Objective?.Title ?? "Error: This action is not associated with an objective!")</MudListItem>
                                </MudList>
                            </MudAlert>
                        }
                        else if (Indicator.Goal is not null)
                        {
                            <MudText Typo="Typo.h6">Goal</MudText>
                            <MudAlert Severity="Severity.Success" NoIcon="true">
                                <div class="d-flex">
                                    <MudAvatar Image="@Indicator.Goal.GetIconPath()" Class="mr-2 my-2" />
                                    <MudText Class="my-4" Typo="Typo.body2">@Indicator.Goal.Title</MudText>
                                </div>
                            </MudAlert>
                        }
                    </MudItem>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.h6" Class="mb-2">Entries</MudText>
                    <MudTable Items="Indicator.Entries.OrderBy(e => e.Date)" Elevation="0" Class="mt-n2" Dense="true">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh>Value</MudTh>
                            <MudTh>Note</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate Context="Entry">
                            <MudTd DataLabel="Date">@Entry.Date.ToLongDateString()</MudTd>
                            <MudTd DataLabel="Value">@Entry.Value @Indicator.UnitOfMeasurement.Symbol</MudTd>
                            <MudTd DataLabel="Note">@Entry.Note</MudTd>
                            <MudTd>
                                <MudTooltip>
                                    <ChildContent>
                                        <MudIcon Icon="@Icons.Material.Outlined.Info"></MudIcon>
                                    </ChildContent>
                                    <TooltipContent>
                                        <MudText>Last updated by @(Entry.UpdatedBy) on @(GetEntryLastUpdatedDate(Entry).ToLocalTime().ToString("f"))</MudText>
                                    </TooltipContent>
                                </MudTooltip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>

            @*<MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6">Visualization</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%"></MudChart>
                </MudPaper>
                </MudItem>*@

            <MudItem xs="12" Class="d-flex justify-space-between py-2 px-3 mt-2">
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Link="/indicators">Back to indicators</MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Edit" OnClick="(() => Edit())">Edit</MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

