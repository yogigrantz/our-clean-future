@using Data.Entities
@using OurCleanFuture.App.Extensions;

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Edit entry
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="isValid">
            @if (Indicator.CollectionInterval == CollectionInterval.Biannual)
            {
                <MudSelect T="Data.Entities.BiannualInterval" Label="Period" @bind-Value="SelectedBiannualInterval">
                    @foreach (Data.Entities.BiannualInterval interval in Enum.GetValues(typeof(Data.Entities.BiannualInterval)))
                    {
                        <MudSelectItem Value="interval">@interval.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            }
            else if (Indicator.CollectionInterval == CollectionInterval.Quarter)
            {
                <MudSelect T="Data.Entities.QuarterInterval" Label="Period" @bind-Value="SelectedQuarterInterval">
                    @foreach (Data.Entities.QuarterInterval interval in Enum.GetValues(typeof(Data.Entities.QuarterInterval)))
                    {
                        <MudSelectItem Value="interval">@interval.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudAutocomplete @ref="YearAutocomplete" T="int" SearchFunc="SearchYears" MaxItems="null" Label="Year" @bind-Value="SelectedYear" SelectValueOnTab="true" CoerceValue="true"
                             Validation="@(new Func<int, IEnumerable<string>>(ValidateYear))" Required="true">
                @foreach (var year in Years)
                {
                    <MudSelectItem T="int" Value="year">@year</MudSelectItem>
                }
            </MudAutocomplete>
            <MudNumericField Label="Value" @bind-Value="TempValue" Adornment="Adornment.End" AdornmentText="@Indicator.UnitOfMeasurement.Symbol" HideSpinButtons="true"
                             Required="true" RequiredError="Value is required" />
            <MudTextField @bind-Value="Entry.Note" Label="Note (optional)" />
            <MudItem xs="12" Class="d-flex justify-space-between py-2 px-3 mt-2">
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" Disabled="(!isValid)" OnClick="AddEntry">Update</MudButton>
            </MudItem>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;


    [Parameter]
    public int[] Years { get; set; } = null!;

    [Parameter]
    public Indicator Indicator { get; set; } = null!;

    [Parameter]
    public Entry Entry { get; set; } = null!;

    private bool isValid = true;

    public int SelectedYear { get; set; }
    public BiannualInterval SelectedBiannualInterval { get; set; }
    public QuarterInterval SelectedQuarterInterval { get; set; }

    public double? TempValue { get; set; }

    public MudAutocomplete<int> YearAutocomplete { get; set; } = new();

    [Inject]
    public ISnackbar Snackbar { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var periodLength = (Entry.EndDate.Month - Entry.StartDate.Month) + 1;
        if (Indicator.CollectionInterval == CollectionInterval.Annual)
        {
            if (periodLength != 12)
            {
                Snackbar.Add($"The period of the entry ({periodLength} months) does not match the indicator's collection interval. The collection interval must be changed to match the entry period before editing.", Severity.Error);
                MudDialog.Cancel();
            }
        }
        else if (Indicator.CollectionInterval == CollectionInterval.Biannual)
        {
            if (periodLength != 6)
            {
                Snackbar.Add($"The period of the entry ({periodLength} months) does not match the indicator's collection interval. The collection interval must be changed to match the entry period before editing.", Severity.Error);
                MudDialog.Cancel();
            }
            switch (Entry.EndDate.Month)
            {
                case 6:
                    SelectedBiannualInterval = BiannualInterval.JanuaryToJune;
                    break;
                case 12:
                    SelectedBiannualInterval = BiannualInterval.JulyToDecember;
                    break;
            }
        }
        else if (Indicator.CollectionInterval == CollectionInterval.Quarter)
        {
            if (periodLength != 3)
            {
                Snackbar.Add($"The period of the entry ({periodLength} months) does not match the indicator's collection interval. The collection interval must be changed to match the entry period before editing.", Severity.Error);
                MudDialog.Cancel();
            }
            switch (Entry.EndDate.Month)
            {
                case 3:
                    SelectedQuarterInterval = QuarterInterval.JanuaryToMarch;
                    break;
                case 6:
                    SelectedQuarterInterval = QuarterInterval.AprilToJune;
                    break;
                case 9:
                    SelectedQuarterInterval = QuarterInterval.JulyToSeptember;
                    break;
                case 12:
                    SelectedQuarterInterval = QuarterInterval.OctoberToDecember;
                    break;
            }
        }
        SelectedYear = Entry.StartDate.Year;
        TempValue = Entry.Value;
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // We must re-validate the SelectedYear after the component is initialized, or else the component will erroneously remain in an invalid state.
        YearAutocomplete.Validate();
        return base.OnAfterRenderAsync(firstRender);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private IEnumerable<string> ValidateYear(int year)
    {
        var currentYear = DateTime.Now.Year;
        if (year < 2010 || year > (currentYear))
        {
            yield return $"Year must be between 2010 and {currentYear}";
        }
    }

    private void AddEntry()
    {
        if (TempValue is not null)
        {
            Entry.Value = (double)TempValue;
            if (Indicator.CollectionInterval == CollectionInterval.Annual)
            {
                Entry.StartDate = new DateTime(SelectedYear, 1, 1);
                Entry.EndDate = new DateTime(SelectedYear, 12, 31);
            }
            else if (Indicator.CollectionInterval == CollectionInterval.Biannual)
            {
                switch (SelectedBiannualInterval)
                {
                    case BiannualInterval.JanuaryToJune:
                        Entry.StartDate = new DateTime(SelectedYear, 1, 1);
                        Entry.EndDate = new DateTime(SelectedYear, 6, 30);
                        break;
                    case BiannualInterval.JulyToDecember:
                        Entry.StartDate = new DateTime(SelectedYear, 7, 1);
                        Entry.EndDate = new DateTime(SelectedYear, 12, 31);
                        break;
                }
            }
            else
            {
                switch (SelectedQuarterInterval)
                {
                    case QuarterInterval.JanuaryToMarch:
                        Entry.StartDate = new DateTime(SelectedYear, 1, 1);
                        Entry.EndDate = new DateTime(SelectedYear, 3, 31);
                        break;
                    case QuarterInterval.AprilToJune:
                        Entry.StartDate = new DateTime(SelectedYear, 4, 1);
                        Entry.EndDate = new DateTime(SelectedYear, 6, 30);
                        break;
                    case QuarterInterval.JulyToSeptember:
                        Entry.StartDate = new DateTime(SelectedYear, 7, 1);
                        Entry.EndDate = new DateTime(SelectedYear, 9, 30);
                        break;
                    case QuarterInterval.OctoberToDecember:
                        Entry.StartDate = new DateTime(SelectedYear, 10, 1);
                        Entry.EndDate = new DateTime(SelectedYear, 12, 31);
                        break;
                }
            }
            MudDialog.Close(DialogResult.Ok(Entry));
        }
    }

    private async Task<IEnumerable<int>> SearchYears(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Years;
        return await Task.FromResult(Years.Where(y => Convert.ToString(y).Contains(value)));
    }
}