@using OurCleanFuture.App.Extensions
@using OurCleanFuture.Data.Entities
@attribute [Authorize]

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Edit entry
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="_isValid">
            @if (Indicator.CollectionInterval == CollectionInterval.Biannual)
            {
                <MudSelect T="BiannualInterval" Label="Period" @bind-Value="SelectedBiannualInterval">
                    @foreach (BiannualInterval interval in Enum.GetValues(typeof(BiannualInterval)))
                    {
                        <MudSelectItem Value="interval">@interval.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            }
            else if (Indicator.CollectionInterval == CollectionInterval.Quarterly)
            {
                <MudSelect T="QuarterlyInterval" Label="Period" @bind-Value="SelectedQuarterlyInterval">
                    @foreach (QuarterlyInterval interval in Enum.GetValues(typeof(QuarterlyInterval)))
                    {
                        <MudSelectItem Value="interval">@interval.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudAutocomplete @ref="YearAutocomplete" T="int" SearchFunc="SearchYears" MaxItems="null" Label="Year" @bind-Value="SelectedYear" SelectValueOnTab="true" CoerceValue="true"
                             Validation="@(new Func<int, IEnumerable<string>>(ValidateYear))" Required="true">
                @foreach (var year in Years)
                {
                    <MudSelectItem T="int" Value="year">@year</MudSelectItem>
                }
            </MudAutocomplete>
            <MudNumericField Label="Value" @bind-Value="TempValue" Adornment="Adornment.End" AdornmentText="@Indicator.UnitOfMeasurement.Symbol" HideSpinButtons="true"
                             Required="true" RequiredError="Value is required"/>
            @if (CheckIfValueIsLikelyUsingTheWrongUnit())
            {
                <MudAlert Severity="Severity.Warning">Please double check that the value you entered is using the correct unit: <b>@Indicator.UnitOfMeasurement.Name.ToLower()</b>. The value entered, @TempValue!.Value, is significantly greater or smaller than the other entry values for this indicator.</MudAlert>
            }
            <MudTextField @bind-Value="Entry.Note" Label="Note (optional)" For="@(() => Entry.Note)"/>
            <MudItem xs="12" Class="d-flex justify-space-between py-2 px-3 mt-2">
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" Disabled="!_isValid" OnClick="AddEntry">Update</MudButton>
            </MudItem>
        </MudForm>
    </DialogContent>
</MudDialog>


