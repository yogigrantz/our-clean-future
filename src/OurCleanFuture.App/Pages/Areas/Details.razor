@page "/areas/{areatitle}"
@using OurCleanFuture.App.Extensions
@attribute [Authorize]

@if (Area is not null)
{
    <PageTitle>[Area] @Area.Title</PageTitle>
}

@if (_isLoaded == false)
{
    <MudText Typo="Typo.h6">Loading...</MudText>
}
else
{
    <div class="d-flex">
        <MudText Class="my-2 mr-4" Typo="Typo.h3">
            <b>Area:</b>
        </MudText>
        <MudAvatar Image="@Area.GetIconPath()" Class="mr-2 my-2" Size="Size.Large"/>
        <MudText Class="my-2 ml-1" Typo="Typo.h3">@Area.Title</MudText>
    </div>
    <MudGrid Class="mt-1">
        @foreach (var objective in Area.Objectives)
        {
            <MudItem md="12" lg="6">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h5">
                        <b>Objective:</b> @objective.Title
                    </MudText>
                    <MudItem Class="pa-2">
                        <MudDivider/>
                        <MudText Typo="Typo.h6" Class="mb-n3" Align="Align.Center">Actions</MudText>
                        <MudList Clickable="true" Dense="true" DisableGutters="true">
                            @foreach (var action in objective.Actions)
                            {
                                // This is a workaround for: "Blazor RZ9986 — Component attributes do not support complex content (mixed C# and markup)"
                                var classText = $"{Area.GetCssClass()} px-2 my-1";
                                <MudListItem Class="@classText" OnClick="() => ViewAction(action)">
                                    <div class="d-flex">
                                        <MudText Class="mr-2">@(action.Number).</MudText>
                                        <MudText>@action.Title</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}
