@page "/indicators/edit/{id:int}"

@if (_isLoaded == false)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
        <MudText Typo="Typo.h3" Class="mb-8"><b>Editing indicator:</b> @Indicator.Title</MudText>
        @*<MudAlert Icon="@Icons.Material.Filled.Lightbulb" Severity="Severity.Normal" Class="mb-6">
            If you need to modify a value within a dropdown menu, you can do that from the <b>Administration</b> menu on the lefthand navigation bar.
            </MudAlert>*@
        <EditForm Model="@Indicator" OnValidSubmit="Update">
            <ObjectGraphDataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudSelect T="Data.Entities.Owner" Label="Lead" @bind-Value="Indicator.Owner">
                            @foreach (var owner in Owners)
                            {
                                <MudSelectItem Value="owner">@owner.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Title" T="string" @bind-Value="Indicator.Title" For="@(() => Indicator.Title)"/>
                        <MudTextField Label="Description" T="string" @bind-Value="Indicator.Description" Lines="2" For="@(() => Indicator.Description)"/>

                        <MudItem>
                            <MudSelect Label="Parent Type" @bind-Value="SelectedParentType">
                                <MudSelectItem Value='"Goal"'>Goal</MudSelectItem>
                                <MudSelectItem Value='"Objective"'>Objective</MudSelectItem>
                                <MudSelectItem Value='"Action"'>Action</MudSelectItem>
                            </MudSelect>
                        </MudItem>

                        @if (SelectedParentType == "Goal")
                        {
                            <MudItem Class="mb-4">
                                <MudSelect Label="Goal" T="Data.Entities.Goal" @bind-Value="Indicator.Goal" DisableUnderLine="true">
                                    @foreach (var goal in Goals)
                                    {
                                        <MudSelectItem Value="goal">@goal.Title</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                        else if (SelectedParentType == "Objective")
                        {
                            <MudItem Class="mb-6">
                                <MudSelect Label="Objective" T="Data.Entities.Objective" @bind-Value="Indicator.Objective" DisableUnderLine="true">
                                    @foreach (var objective in Objectives)
                                    {
                                        <MudSelectItem Value="objective">@objective.Area.Title | @objective.Title</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                        else if (SelectedParentType == "Action")
                        {
                            <MudItem Class="mb-12">
                                <MudSelect Label="Action" T="Data.Entities.Action" @bind-Value="Indicator.Action" DisableUnderLine="true">
                                    @foreach (var action in Actions.OrderBy(a => a.Code[0]).ThenBy(a => a.Code.Length).ThenBy(a => a.Code))
                                    {
                                        <MudSelectItem Value="action">@action.ToString()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudSelect T="Data.Entities.DataType" Label="Data Type" @bind-Value="Indicator.DataType">
                            @foreach (Data.Entities.DataType dataType in Enum.GetValues(typeof(Data.Entities.DataType)))
                            {
                                <MudSelectItem Value="dataType">@dataType</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Label="Collection Interval" T="Data.Entities.CollectionInterval" @bind-Value="Indicator.CollectionInterval">
                            @foreach (Data.Entities.CollectionInterval interval in Enum.GetValues(typeof(Data.Entities.CollectionInterval)))
                            {
                                <MudSelectItem Value="interval">@interval</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="Data.Entities.UnitOfMeasurement" Label="Unit of Measurement" @bind-Value="Indicator.UnitOfMeasurement">
                            @foreach (var unit in UnitsOfMeasurement.OrderBy(u => u.Symbol))
                            {
                                <MudSelectItem Value="unit">@unit.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSwitch @bind-Checked="@Indicator.IsActive" Color="Color.Info" Class="mt-4">@(Indicator.IsActive?"Active":"Inactive")</MudSwitch>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.h6">Target</MudText>
                        @if (Indicator.Target != null)
                        {
                            <MudNumericField Label="Value" @bind-Value="Indicator.Target.Value" Adornment="Adornment.End" AdornmentText="@Indicator.UnitOfMeasurement.Symbol" HideSpinButtons="true"></MudNumericField>
                            <MudTooltip Text="Use only if the OCF Description specifies a date range">
                                <MudDatePicker Label="Start Date" @bind-Date="Indicator.Target.StartDate" Editable="true"></MudDatePicker>
                            </MudTooltip>
                            <MudDatePicker Label="Completion Date" @bind-Date="Indicator.Target.EndDate" Editable="true" For="@(() => Indicator.Target.EndDate)"/>
                            <MudTextField Label="OCF Description" @bind-Value="Indicator.Target.OcfDescription" Lines="2"For="@(() => Indicator.Target.OcfDescription)"/>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="(() => DeleteTarget())" Class="mt-4">Delete target</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="(() => CreateTarget())" Class="mt-4">Add target</MudButton>
                        }
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="2">
                        <MudTable Items="Indicator.Entries.OrderBy(e => e.Date)" Elevation="0" Class="mt-n2" Dense="true">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Entries</MudText>
                                <MudSpacer />
                                <MudButton Color="Color.Tertiary" Variant="Variant.Outlined" OnClick="(() => CreateEntry())">New Entry</MudButton>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Value</MudTh>
                                <MudTh>Note</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate Context="Entry">
                                <MudTd DataLabel="Date">@Entry.Date.ToLongDateString()</MudTd>
                                <MudTd DataLabel="Value">@Entry.Value @Indicator.UnitOfMeasurement.Symbol</MudTd>
                                <MudTd DataLabel="Note">@Entry.Note</MudTd>
                                <MudTd>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                        <MudMenuItem OnClick="(() => EditEntry(Entry))">Edit</MudMenuItem>
                                        <MudMenuItem OnClick="(() => DeleteEntry(Entry))">Delete</MudMenuItem>
                                    </MudMenu>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-space-between py-2 px-3 mt-2">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Link="/indicators">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="true" />
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudContainer>
}